"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AnnouncementPlugin: () => AnnouncementPlugin
});
module.exports = __toCommonJS(src_exports);
var import_node_path = __toESM(require("path"));
var import_node_url = require("url");
var import_javascript_stringify = require("javascript-stringify");
var import_meta = {};
function isESM() {
  return typeof __filename === "undefined" || typeof __dirname === "undefined";
}
function getDirname() {
  return isESM() ? import_node_path.default.dirname((0, import_node_url.fileURLToPath)(import_meta.url)) : __dirname;
}
var componentName = "Announcement";
var componentFile = `${componentName}.vue`;
var aliasComponentFile = `${getDirname()}/components/${componentFile}`;
var virtualModuleId = "virtual:announcement-options";
var resolvedVirtualModuleId = `\0${virtualModuleId}`;
function AnnouncementPlugin(options) {
  const componentOptions = {
    clientOnly: false,
    duration: 0,
    mobileMinify: false,
    reopen: true,
    twinkle: false,
    ...options
  };
  const pluginOps = {
    name: "vitepress-plugin-announcement",
    enforce: "pre",
    config: () => {
      return {
        resolve: {
          alias: {
            [`./${componentFile}`]: aliasComponentFile
          }
        }
      };
    },
    transform(code, id) {
      if (id.endsWith("vitepress/dist/client/theme-default/Layout.vue")) {
        const slotPosition = '<slot name="layout-top" />';
        let transformResult = code.replace(slotPosition, `${slotPosition}<Announcement/>`);
        if (componentOptions.clientOnly) {
          transformResult = transformResult.replace("<Announcement/>", "<ClientOnly><Announcement/></ClientOnly>");
        }
        const setupPosition = '<script setup lang="ts">';
        transformResult = transformResult.replace(setupPosition, `${setupPosition}
import Announcement from './Announcement.vue'`);
        return transformResult;
      }
    },
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
    },
    load(id) {
      if (id === resolvedVirtualModuleId) {
        return `export default ${(0, import_javascript_stringify.stringify)(componentOptions)}`;
      }
    }
  };
  return pluginOps;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AnnouncementPlugin
});
